<?xml version="1.0" encoding="UTF-8"?>
<!-- This file contains prototypes intended for use only at the University
     of canterbury, but possibly of interest to other users -->
<quiz>
<!-- question: 0  -->
  <question type="category">
    <category>
        <text>$system$/UOC_CR_PROTOTYPES</text>

    </category>
  </question>

<!-- question: 9  -->
  <question type="coderunner">
    <name>
      <text>UOC_PROTOTYPE_c_full_main_tests</text>
    </name>
    <questiontext format="moodle_auto_format">
      <text>Used for C questions where the student writes global declarations (types, functions etc) and each test case contains a complete main function that follows the student code.</text>
    </questiontext>
    <generalfeedback format="moodle_auto_format">
      <text></text>
    </generalfeedback>
    <defaultgrade>1.0000000</defaultgrade>
    <penalty>0.3333333</penalty>
    <hidden>0</hidden>
    <coderunnertype>c_full_main_tests</coderunnertype>
    <prototypetype>2</prototypetype>
    <allornothing>1</allornothing>
    <penaltyregime></penaltyregime>
    <showsource>0</showsource>
    <answerboxlines>18</answerboxlines>
    <answerboxcolumns>100</answerboxcolumns>
    <useace>1</useace>
    <resultcolumns></resultcolumns>
    <answer></answer>
    <combinatortemplate></combinatortemplate>
    <testsplitterre></testsplitterre>
    <enablecombinator>0</enablecombinator>
    <pertesttemplate><![CDATA[#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <stdbool.h>
{{STUDENT_ANSWER}}

{{ TEST.testcode }}]]></pertesttemplate>
    <language>C</language>
    <acelang></acelang>
    <sandbox></sandbox>
    <grader></grader>
    <cputimelimitsecs></cputimelimitsecs>
    <memlimitmb></memlimitmb>
    <sandboxparams></sandboxparams>
    <templateparams></templateparams>
    <testcases>
    </testcases>
  </question>

<!-- question: 10  -->
  <question type="coderunner">
    <name>
      <text>UOC_PROTOTYPE_clojure</text>
    </name>
    <questiontext format="moodle_auto_format">
      <text>Test of Clojure questions where the student' code isrun then the test code. There is currently no combinator, so the program is executed for each test case. Written mainly as a test of the Ideone sandbox.</text>
    </questiontext>
    <generalfeedback format="moodle_auto_format">
      <text></text>
    </generalfeedback>
    <defaultgrade>1.0000000</defaultgrade>
    <penalty>0.3333333</penalty>
    <hidden>0</hidden>
    <coderunnertype>clojure</coderunnertype>
    <prototypetype>2</prototypetype>
    <allornothing>1</allornothing>
    <penaltyregime></penaltyregime>
    <showsource>0</showsource>
    <answerboxlines>18</answerboxlines>
    <answerboxcolumns>100</answerboxcolumns>
    <useace>1</useace>
    <resultcolumns></resultcolumns>
    <answer></answer>
    <combinatortemplate></combinatortemplate>
    <testsplitterre></testsplitterre>
    <enablecombinator>0</enablecombinator>
    <pertesttemplate>{{ STUDENT_ANSWER }}
{{TEST.testcode}}</pertesttemplate>
    <language>Clojure (clojure 1.5.0-RC2)</language>
    <acelang></acelang>
    <sandbox></sandbox>
    <grader></grader>
    <cputimelimitsecs></cputimelimitsecs>
    <memlimitmb></memlimitmb>
    <sandboxparams></sandboxparams>
    <templateparams></templateparams>
    <testcases>
    </testcases>
  </question>

<!-- question: 11  -->
  <question type="coderunner">
    <name>
      <text>UOC_PROTOTYPE_matlab_function</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[Used for Matlab function questions. Student code must be a function declaration, which is tested with each testcase.<p><br></p><p>This version actually uses Octave, with a modified 'disp' function, rather than Matlab. There are bound to be subtle differences. Caveat emptor.</p>]]></text>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>1.0000000</defaultgrade>
    <penalty>0.3333333</penalty>
    <hidden>0</hidden>
    <coderunnertype>matlab_function</coderunnertype>
    <prototypetype>2</prototypetype>
    <allornothing>1</allornothing>
    <penaltyregime></penaltyregime>
    <showsource>0</showsource>
    <answerboxlines>18</answerboxlines>
    <answerboxcolumns>100</answerboxcolumns>
    <useace>1</useace>
    <resultcolumns></resultcolumns>
    <answer></answer>
    <combinatortemplate><![CDATA[function disp(x)
    [h, w] = size(x);
    if (h != 1)
        for i = 1:h
            disp(x(i,1:w));
        end
        return;
    end
    if (strcmp(class(x), 'logical') == 1)
        printf('%6d', x)
        printf('\n')
    elseif (strcmp(class(x), 'double') == 1)
        if (int64(x) == x)   % Integral?
            if abs(x) > 99999
                printf('%12d', x);
            else
                printf('%6d', x)
            end
            printf('\n')
        else
            printf('%10.4f', x)
            printf('\n')
        end
    elseif (strcmp(class(x), 'char') == 1)
        printf('%s\n', x)
    elseif (strcmp(class(x), 'struct') == 1)
        names = fieldnames(x);
        for i = 1 : length(names)
            field = names{i};
            value = getfield(x, field);
            if strcmp(class(value), 'double') == 1 && int64(value) == value
                fprintf('%8s: %d\n', field, value);
            elseif strcmp(class(value), 'double') == 1
                fprintf('%8s: %f\n', field, value);
            elseif strcmp(class(value), 'char') == 1
                fprintf('%8s: ''%s''\n', field, value);
            else
                fprintf('%8s: ', field);
                disp(value);
            end
        end
        fprintf('\n');
    else
        printf('Unexpected data type passed to disp')
    end
end

{{ STUDENT_ANSWER }}
{% for TEST in TESTCASES %}
{{ TEST.testcode }};
{% if not loop.last %}
disp('#<ab@17943918#@>#');
{% endif %}
{% endfor %}
quit();
]]></combinatortemplate>
    <testsplitterre><![CDATA[|#<ab@17943918#@>#\n|ms]]></testsplitterre>
    <enablecombinator>1</enablecombinator>
    <pertesttemplate><![CDATA[function disp(x)
    [h, w] = size(x);
    if (h != 1)
        for i = 1:h
            disp(x(i,1:w));
        end
        return;
    end
    if (strcmp(class(x), 'logical') == 1)
        printf('%6d', x)
        printf('\n')
    elseif (strcmp(class(x), 'double') == 1)
        if (int64(x) == x)   % Integral?
            if abs(x) > 99999
                printf('%12d', x);
            else
                printf('%6d', x)
            end
            printf('\n')
        else
            printf('%10.4f', x)
            printf('\n')
        end
    elseif (strcmp(class(x), 'char') == 1)
        printf('%s\n', x)
    elseif (strcmp(class(x), 'struct') == 1)
        names = fieldnames(x);
        for i = 1 : length(names)
            field = names{i};
            value = getfield(x, field);
            if strcmp(class(value), 'double') == 1 && int64(value) == value
                fprintf('%8s: %d\n', field, value);
            elseif strcmp(class(value), 'double') == 1
                fprintf('%8s: %f\n', field, value);
            elseif strcmp(class(value), 'char') == 1
                fprintf('%8s: ''%s''\n', field, value);
            else
                fprintf('%8s: ', field);
                disp(value);
            end
        end
        fprintf('\n');
    else
        printf('Unexpected data type passed to disp')
    end
end

{{ STUDENT_ANSWER }}

{{ TEST.testcode }};

quit();]]></pertesttemplate>
    <language>octave</language>
    <acelang></acelang>
    <sandbox></sandbox>
    <grader>NearEqualityGrader</grader>
    <cputimelimitsecs>10</cputimelimitsecs>
    <memlimitmb>0</memlimitmb>
    <sandboxparams></sandboxparams>
    <templateparams></templateparams>
    <testcases>
    </testcases>
  </question>

<!-- question: 2799  -->
  <question type="coderunner">
    <name>
      <text>UOC_PROTOTYPE_matlab_script</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[Used for Matlab scripts (so-called). Runs the test code first (which probably sets up a context) and then runs the student's code, which may or may not generate output dependent on the context. Finally the <i>extra</i>&nbsp;code is run (if any).<p><br></p><p>This version actually uses Octave, with a modified 'disp' function, rather than Matlab. There are bound to be subtle differences.<p><p></p><p></p></p></p>]]></text>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>1.0000000</defaultgrade>
    <penalty>0.3333333</penalty>
    <hidden>0</hidden>
    <coderunnertype>matlab_script</coderunnertype>
    <prototypetype>2</prototypetype>
    <allornothing>1</allornothing>
    <penaltyregime></penaltyregime>
    <showsource>0</showsource>
    <answerboxlines>18</answerboxlines>
    <answerboxcolumns>100</answerboxcolumns>
    <useace>1</useace>
    <resultcolumns></resultcolumns>
    <answer></answer>
    <combinatortemplate><![CDATA[function disp(x)
    if (strcmp(class(x), 'logical') == 1)
        printf('%6d', x)
        printf('\n')
    elseif (strcmp(class(x), 'double') == 1)
        if (int64(x) == x)   % Integral?
            printf('%6d', x)
            printf('\n')
        else
            printf('%10.4f', x)
            printf('\n')
        end
    elseif (strcmp(class(x), 'char') == 1)
        printf('%s\n', x)
    else
        printf('Unexpected data type passed to disp')
    end
end

{% for TEST in TESTCASES %}
{{ TEST.testcode }};
{{ STUDENT_ANSWER }}
clear;
{% if not loop.last %}
disp('#<ab@17943918#@>#');
{% endif %}
{% endfor %}
quit();]]></combinatortemplate>
    <testsplitterre><![CDATA[|#<ab@17943918#@>#\n|ms]]></testsplitterre>
    <enablecombinator>1</enablecombinator>
    <pertesttemplate>function disp(x)
    if (strcmp(class(x), 'logical') == 1)
        printf('%6d', x)
        printf('\n')
    elseif (strcmp(class(x), 'double') == 1)
        if (int64(x) == x)   % Integral?
            printf('%6d', x)
            printf('\n')
        else
            printf('%10.4f', x)
            printf('\n')
        end
    elseif (strcmp(class(x), 'char') == 1)
        printf('%s\n', x)
    else
        printf('Unexpected data type passed to disp')
    end
end

{{ TEST.testcode }};

{{ STUDENT_ANSWER }}

quit();

</pertesttemplate>
    <language>octave</language>
    <acelang></acelang>
    <sandbox></sandbox>
    <grader>NearEqualityGrader</grader>
    <cputimelimitsecs>10</cputimelimitsecs>
    <memlimitmb>0</memlimitmb>
    <sandboxparams></sandboxparams>
    <templateparams></templateparams>
    <testcases>
    </testcases>
  </question>

<!-- question: 12  -->
  <question type="coderunner">
    <name>
      <text>UOC_PROTOTYPE_nodejs</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<p>A generic nodejs question in which the student answer precedes the tests.</p>]]></text>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>1.0000000</defaultgrade>
    <penalty>0.3333333</penalty>
    <hidden>0</hidden>
    <coderunnertype>nodejs</coderunnertype>
    <prototypetype>2</prototypetype>
    <allornothing>1</allornothing>
    <penaltyregime></penaltyregime>
    <showsource>0</showsource>
    <answerboxlines>18</answerboxlines>
    <answerboxcolumns>100</answerboxcolumns>
    <useace>1</useace>
    <resultcolumns></resultcolumns>
    <answer></answer>
    <combinatortemplate><![CDATA[{{ STUDENT_ANSWER }}

SEPARATOR = "#<ab@17943918#@>#"

{% for TEST in TESTCASES %}
{{ TEST.testcode }}
{% if not loop.last %}
print(SEPARATOR)
{% endif %}
{% endfor %}]]></combinatortemplate>
    <testsplitterre><![CDATA[|#<ab@17943918#@>#\n|ms]]></testsplitterre>
    <enablecombinator>1</enablecombinator>
    <pertesttemplate>{{STUDENT_ANSWER}}

{{TEST.testcode}}</pertesttemplate>
    <language>nodejs</language>
    <acelang></acelang>
    <sandbox></sandbox>
    <grader>EqualityGrader</grader>
    <cputimelimitsecs></cputimelimitsecs>
    <memlimitmb>1000</memlimitmb>
    <sandboxparams></sandboxparams>
    <templateparams></templateparams>
    <testcases>
    </testcases>
  </question>

<!-- question: 14  -->
  <question type="coderunner">
    <name>
      <text>UOC_PROTOTYPE_python3_cosc121</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<p>Prototype for a COSC121 Python3 question that is checked by pylint before being executed. Other style checks are also implemented.</p><p>It can take the following template parameters:</p>
<ul>
<li>isfunction: unless this isexplicitly set to false, a dummy module docstring will be inserted at the start of the program <b>unless there is one there&nbsp;</b><b>already</b>. Thus, if your question is of the "write a program" variety, you <i>should</i>&nbsp;set this to false. Otherwise omit it.</li><li><span style="font-size: 14px;">pylintoptions: this should be a JSON list of strings.&nbsp;</span><span style="font-size: 14px;">For example, the Template parameters string in the question authoring form might be set to</span></li><li><p>{"isfunction": false, "pylintoptions":["--max-statements=20","--max-args=3"]}&nbsp;<span style="font-size: 14px;">to suppress the insertion of a dummy module docstring at the start and to set the maximum number of statements and arguments for each function to 20 and 3 respectively.</span></p></li><li><p>proscribedconstructs: this is a list of Python constructs (if, while, def, etc) that <b>must not</b> appear in the student's program.</p></li><li><p>prescribedconstructs:&nbsp;<span style="font-size: 14px;">this is a list of Python constructs (if, while, def, etc) that</span><b style="font-size: 14px;">must </b><span style="font-size: 14px;">appear in the student's program.</span></p></li><li><p><span style="font-size: 14px;">allowglobals: set this to true to allow global variables (i.e. to allow lowercase globals, not just "constants")</span></p></li><li><p><span style="font-size: 14px;">maxnumconstants: the maximum number of constants (i.e. uppercase globals) allowed. An integer, defaulting to 4.</span></p></li><li><p><span style="font-size: 14px;">norun: if set to true, the normal execution of the student's code will not take place. Any test code provided will however still be run.</span></p></li><li><p><span style="font-size: 14px;">stripmain: if set to True, the program is expected to contain a global invocation of the main function, which is a line starting "main()". That line is deleted from the program. If the line is not present a "Missing call to main" exception is raised.</span></p></li><li><span style="font-size: 14px;">runextra: if set (to any value) the Extra Template Data is added to the program as test code <i>before</i> the usual testcode.<br></span></li>
</ul>
<p><br></p>
<p><br></p>]]></text>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>1.0000000</defaultgrade>
    <penalty>0.1000000</penalty>
    <hidden>0</hidden>
    <coderunnertype>python3_cosc121</coderunnertype>
    <prototypetype>2</prototypetype>
    <allornothing>1</allornothing>
    <penaltyregime>0,0,0,0,0,0,10,20,...</penaltyregime>
    <showsource>0</showsource>
    <answerboxlines>60</answerboxlines>
    <answerboxcolumns>100</answerboxcolumns>
    <useace>1</useace>
    <resultcolumns></resultcolumns>
    <answer></answer>
    <combinatortemplate><![CDATA[__student_answer__ = """{{ STUDENT_ANSWER | e('py') }}""" + '\n'

import subprocess
import os
import sys
import re

{% if QUESTION.parameters.usestandardinput is not defined or not (QUESTION.parameters.usestandardinput) %}
__saved_input__ = input
def input(prompt=''):
    s = __saved_input__(prompt)
    print(s)
    return s
    
{% endif %}

prelude = ''
{% for imp in QUESTION.parameters.imports %}
prelude += """import {{imp}}\n"""
{% endfor %}

{% for banned in QUESTION.parameters.proscribedfunctions %}
def {{banned}}(*args, **namedargs):
    raise Exception("You called the banned function '{{banned}}'. Tsk tsk!")
    
{% endfor %}
def pylint_is_happy(s):
{% if QUESTION.parameters.isfunction or not (QUESTION.parameters.isfunction is defined) %}
    if len(s.strip()) == 0 or s.strip()[0] not in ['"', "'"]:
        s = "'''Dummy module docstring'''\n" + s  # Add module docstring if nec.
{% endif %}
    try:
        source = open('source.py', 'w')
        source.write(s)
        source.close()
        env = os.environ.copy()
        env['HOME'] = os.getcwd()
        pylint_opts = ['--disable=C0303,C0330,R0903', '--enable=C0326']
{% if QUESTION.parameters.allowglobals %}
        pylint_opts.append("--const-rgx='[a-zA-Z_][a-zA-Z0-9_]{2,30}$'")
{% endif %}
{% for option in QUESTION.parameters.pylintoptions %}
        pylint_opts.append('{{option}}')
{% endfor %}
        cmd = 'pylint ' + ' '.join(pylint_opts) + ' source.py'
        result = subprocess.check_output(cmd, stderr=subprocess.STDOUT, env=env, shell=True)
    except Exception as e:
        result = e.output.decode('utf-8')

    if result.strip():
        print("Sorry, but your code doesn't pass the pylint style checks.", file=sys.stderr)
        print(result)
        return False
    else:
        return True
        
        
def __contains__(code, construct):
    '''True iff the given construct is used in code'''
    return any(line.strip().startswith(construct + ' ') for line in code.split('\n'))
    

def local_checks_ok(code):
    """Perform various local checks as specified by the current set of 
       template parameters. Note that if stripmain is defined the global
       __student_answer__ is updated (shock, horror).
    """
    global __student_answer__
    errors = []
{% for reqd in QUESTION.parameters.requiredconstructs %}
    if not __contains__(code, '{{reqd}}'):
        errors.append("Your program must include at least one " + '{{reqd}}' + " statement.")
{% endfor %}
{% for notallowed in QUESTION.parameters.proscribedconstructs %}
    if __contains__(code, '{{notallowed}}'):
        errors.append("Your program must not include any " + '{{notallowed}}' + " statements.")
{% endfor %}
    num_constants = len([line for line in code.split('\n') if re.match('[A-Z_][A-Z_0-9]* *=', line)])
{% if QUESTION.parameters.maxnumconstants is defined %}
    max_allowed = {{ QUESTION.parameters.maxnumconstants }}
{% else %}
    max_allowed = 4
{% endif %}
    if num_constants > max_allowed:
        errors.append("You may not use more than " + str(max_allowed) + " constants.")
        
{% if QUESTION.parameters.stripmain is defined %}
    if {{ QUESTION.parameters.stripmain }}:
        if not __contains__(code, 'main()', ''):
            errors.append("No call to main() found")
        else:
            __student_answer__  = '\n'.join(line for line in code.split('\n')
                 if not line.startswith('main()')) + '\n'    
{% endif %}

    for error in errors:
        print(error, file=sys.stderr)
    return len(errors) == 0


if (pylint_is_happy(prelude + __student_answer__) and local_checks_ok(__student_answer__)):
    __SEPARATOR__ = "#<ab@17943918#@>#"

{% for TEST in TESTCASES %}
    codeToRun = prelude
{% if not QUESTION.parameters.norun %}
    codeToRun += '\n' + __student_answer__ + '\n' 
{% endif %}
{% if QUESTION.parameters.runextra %}
    codeToRun += '\n' + """{{ TEST.extra | e('py') }}""" + '\n'
{% endif %}
    codeToRun += '\n' + """{{ TEST.testcode | e('py') }}""" + '\n'
    exec(codeToRun)
{% if not loop.last %}
    print(__SEPARATOR__)
{% endif %}
{% endfor %}
    ]]></combinatortemplate>
    <testsplitterre><![CDATA[|#<ab@17943918#@>#\n|ms]]></testsplitterre>
    <enablecombinator>1</enablecombinator>
    <pertesttemplate><![CDATA[__student_answer__ = """{{ STUDENT_ANSWER | e('py') }}""" + '\n'

import subprocess
import os
import sys
import re

{% if QUESTION.parameters.usestandardinput is not defined or not (QUESTION.parameters.usestandardinput) %}
__saved_input__ = input
def input(prompt=''):
    s = __saved_input__(prompt)
    print(s)
    return s
{% endif %}
    
{% for banned in QUESTION.parameters.proscribedfunctions %}
def {{banned}}(*args, **namedargs):
    raise Exception("You called the banned function '{{banned}}'. Tsk tsk!")
    
{% endfor %}

prelude = ''
{% for imp in QUESTION.parameters.imports %}
prelude += """import {{imp}}\n"""
{% endfor %}

def pylint_is_happy(s):
{% if QUESTION.parameters.isfunction or not (QUESTION.parameters.isfunction is defined) %}
    if len(s.strip()) == 0 or s.strip()[0] not in ['"', "'"]:
        s = "'''Dummy module docstring'''\n" + s  # Add module docstring if nec.
{% endif %}
    try:
        source = open('source.py', 'w')
        source.write(s)
        source.close()
        env = os.environ.copy()
        env['HOME'] = os.getcwd()
        pylint_opts = ['--disable=C0303,C0330,R0903', '--enable=C0326']
{% if QUESTION.parameters.allowglobals %}
        pylint_opts.append("--const-rgx='[a-zA-Z_][a-zA-Z0-9_]{2,30}$'")
{% endif %}
{% for option in QUESTION.parameters.pylintoptions %}
        pylint_opts.append('{{option}}')
{% endfor %}
        cmd = 'pylint ' + ' '.join(pylint_opts) + ' source.py'
        result = subprocess.check_output(cmd, stderr=subprocess.STDOUT, env=env, shell=True)
    except Exception as e:
        result = e.output.decode('utf-8')

    if result.strip():
        print("Sorry, but your code doesn't pass the pylint style checks.", file=sys.stderr)
        print(result)
        return False
    else:
        return True
        
        
def __contains__(code, construct, separator=' '):
    '''True iff the given construct is used in code'''
    return any(line.strip().startswith(construct + separator) for line in code.split('\n'))
    

def local_checks_ok(code):
    """Perform various local checks as specified by the current set of 
       template parameters. Note that if stripmain is defined the global
       __student_answer__ is updated (shock, horror).
    """
    global __student_answer__
    errors = []
{% for reqd in QUESTION.parameters.requiredconstructs %}
    if not __contains__(code, '{{reqd}}'):
        errors.append("Your program must include at least one " + '{{reqd}}' + " statement.")
{% endfor %}
{% for notallowed in QUESTION.parameters.proscribedconstructs %}
    if __contains__(code, '{{notallowed}}'):
        errors.append("Your program must not include any " + '{{notallowed}}' + " statements.")
{% endfor %}
    num_constants = len([line for line in code.split('\n') if re.match('[A-Z_][A-Z_0-9]* *=', line)])
{% if QUESTION.parameters.maxnumconstants is defined %}
    max_allowed = {{ QUESTION.parameters.maxnumconstants }}
{% else %}
    max_allowed = 4
{% endif %}
    if num_constants > max_allowed:
        errors.append("You may not use more than " + str(max_allowed) + " constants.")
{% if QUESTION.parameters.stripmain is defined %}
    if {{ QUESTION.parameters.stripmain }}:
        if not __contains__(code, 'main()', ''):
            errors.append("No call to main() found")
        else:
            __student_answer__  = '\n'.join(line for line in __student_answer__.split('\n')
                 if not line.startswith('main()')) + '\n'
{% endif %}
    for error in errors:
        print(error, file=sys.stderr)
    return len(errors) == 0


if (pylint_is_happy(prelude + __student_answer__) and
    local_checks_ok(__student_answer__)):
    codeToRun = prelude
{% if not QUESTION.parameters.norun %}
    codeToRun += '\n' + __student_answer__ + '\n' 
{% endif %}
{% if QUESTION.parameters.runextra %}
    codeToRun += '\n' + """{{ TEST.extra | e('py') }}""" + '\n'
{% endif %}
    codeToRun += '\n' + """{{ TEST.testcode | e('py') }}""" + '\n'

    exec(codeToRun)]]></pertesttemplate>
    <language>python3</language>
    <acelang></acelang>
    <sandbox></sandbox>
    <grader>EqualityGrader</grader>
    <cputimelimitsecs></cputimelimitsecs>
    <memlimitmb></memlimitmb>
    <sandboxparams></sandboxparams>
    <templateparams></templateparams>
    <testcases>
    </testcases>
  </question>

<!-- question: 13  -->
  <question type="coderunner">
    <name>
      <text>UOC_PROTOTYPE_python3_ideone</text>
    </name>
    <questiontext format="moodle_auto_format">
      <text>Used for testing the Ideone sandbox.</text>
    </questiontext>
    <generalfeedback format="moodle_auto_format">
      <text></text>
    </generalfeedback>
    <defaultgrade>1.0000000</defaultgrade>
    <penalty>0.3333333</penalty>
    <hidden>0</hidden>
    <coderunnertype>python3_ideone</coderunnertype>
    <prototypetype>2</prototypetype>
    <allornothing>1</allornothing>
    <penaltyregime></penaltyregime>
    <showsource>0</showsource>
    <answerboxlines>18</answerboxlines>
    <answerboxcolumns>100</answerboxcolumns>
    <useace>1</useace>
    <resultcolumns></resultcolumns>
    <answer></answer>
    <combinatortemplate><![CDATA[{{ STUDENT_ANSWER }}

__student_answer__ = """{{ STUDENT_ANSWER | e('py') }}"""

SEPARATOR = "#<ab@17943918#@>#"

{% for TEST in TESTCASES %}
{{ TEST.testcode }}
{% if not loop.last %}
print(SEPARATOR)
{% endif %}
{% endfor %}]]></combinatortemplate>
    <testsplitterre><![CDATA[|#<ab@17943918#@>#
|ms]]></testsplitterre>
    <enablecombinator>1</enablecombinator>
    <pertesttemplate><![CDATA[{{STUDENT_ANSWER}}

__student_answer__ = """{{ STUDENT_ANSWER | e('py') }}"""

{{ TEST.testcode }}]]></pertesttemplate>
    <language>python3</language>
    <acelang></acelang>
    <sandbox>IdeoneSandbox</sandbox>
    <grader></grader>
    <cputimelimitsecs></cputimelimitsecs>
    <memlimitmb></memlimitmb>
    <sandboxparams></sandboxparams>
    <templateparams></templateparams>
    <testcases>
    </testcases>
  </question>

<!-- question: 9044  -->
  <question type="coderunner">
    <name>
      <text>UOC_PROTOTYPE_python3_pylint</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<p>Prototype for a Python3 question that is checked by pylint before being executed. It can take two template parameters:</p>
<ul>
<li>isfunction: if set and true a dummy module docstring will be inserted at the start of the program. This is useful in "write a function" questions.</li>
<li>pylintoptions: this should be a JSON list of strings.</li>
</ul>
<p>For example, the Template parameters string in the question authoring form might be set to</p>
<p>{"isfunction": true, "pylintoptions":["--max-statements=20","--max-args=3"]}</p>
<p>to generate a module docstring at the start and to set the maximum number of statements and arguments for each function to 20 and 3 respectively.</p>]]></text>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>1.0000000</defaultgrade>
    <penalty>0.1000000</penalty>
    <hidden>0</hidden>
    <coderunnertype>python3_pylint</coderunnertype>
    <prototypetype>2</prototypetype>
    <allornothing>1</allornothing>
    <penaltyregime>0,0,0,0,0,0,10,20,...</penaltyregime>
    <showsource>0</showsource>
    <answerboxlines>60</answerboxlines>
    <answerboxcolumns>100</answerboxcolumns>
    <useace>1</useace>
    <resultcolumns></resultcolumns>
    <answer></answer>
    <combinatortemplate></combinatortemplate>
    <testsplitterre><![CDATA[|#<ab@17943918#@>#|ms]]></testsplitterre>
    <enablecombinator>0</enablecombinator>
    <pertesttemplate><![CDATA[__student_answer__ = """{{ STUDENT_ANSWER | e('py') }}"""

import subprocess
import os

def check_code(s):
{% if QUESTION.parameters.isfunction %}
    s = "'''Dummy module docstring'''\n" + s
{% endif %}
    try:
        source = open('source.py', 'w')
        source.write(s)
        source.close()
        env = os.environ.copy()
        env['HOME'] = os.getcwd()
        pylint_opts = []
{% for option in QUESTION.parameters.pylintoptions %}
        pylint_opts.append('{{option}}')
{% endfor %}
        cmd = ['pylint', 'source.py'] + pylint_opts
        result = subprocess.check_output(cmd, stderr=subprocess.STDOUT, env=env)
    except Exception as e:
        result = e.output.decode('utf-8')

    if result.strip():
        print("pylint doesn't approve of your program")
        print(result)
        raise Exception("Submission rejected")

check_code(__student_answer__)

{{ STUDENT_ANSWER }}
{{ TEST.testcode }}]]></pertesttemplate>
    <language>python3</language>
    <acelang></acelang>
    <sandbox></sandbox>
    <grader></grader>
    <cputimelimitsecs>30</cputimelimitsecs>
    <memlimitmb>1024</memlimitmb>
    <sandboxparams></sandboxparams>
    <templateparams></templateparams>
    <testcases>
    </testcases>
  </question>

</quiz>